#!/usr/bin/env ruby
# encoding: UTF-8

#
# Dead simple command line file signer and signature verifier
# Project page: https://github.com/myxcel/songe#readme
#
#  Created  01/04/2020
#  Updated  22/07/2024
#  Version  1.2.1.0
#  Author   Mica√´l P. (myxcel)
#
# Dependencies:
#  - libsodium, https://github.com/jedisct1/libsodium
#    installation on Ubuntu:  $ sudo apt install libsodium23
#  - RbNaCl,    https://github.com/RubyCrypto/rbnacl
#    installation:  $ sudo gem install rbnacl
#  - highline,  https://github.com/JEG2/highline
#    installation:  $ sudo gem install highline
#  - base32,    https://github.com/stesla/base32
#    installation:  $ sudo gem install base32
#  - digest-crc, https://github.com/postmodern/digest-crc
#    installation:  $ sudo gem install digest-crc
#  - strong_password, https://github.com/bdmac/strong_password
#    installation:  $ sudo gen install strong_password
#
# License:
#  Distributed under the MIT License (https://mit-license.org/)
#

# ========== dependencies ==========

require 'io/console'
require 'optparse'
require 'securerandom'
require 'base64'
require 'yaml'
begin
  # additional gems
  require 'highline/import'
  require 'strong_password'
  require 'digest'
  require 'base32'
  require 'rbnacl'  # needs libsodium
rescue LoadError => ex
  puts "‚úñ #{ex.message.gsub("'"," ")}"
  puts "‚ö† songe requires the following gems to be installed:\n" +
    "  rbnacl, base32, digest-crc, highline, strong_password"
  exit 2
end

# ========== Songe global module ==========
module Songe

VERSION = '1.2.1'
DEBUG   = false

# ========== constants declaration ==========

KEYFILE  = '.songe.key'
KEYTRUST = '.songe.trust'
SIGEXT   = '.sgsig'
SONGE_URL = 'https://github.com/myxcel/songe'
ENV_SHOME = 'SONGE_HOME'
ENV_HOME  = 'HOME'

# ========== exceptions declaration ==========

class KeyfileError < RuntimeError
end
class PasswordError < RuntimeError
end
class VerificationError < RuntimeError
end

# Encoding class
class Enc

  def Enc::encode(str)
    Base64::strict_encode64(str)
  end

  def Enc::decode(str)
    begin
      Base64::strict_decode64(str)
    rescue => ex
      raise RuntimeError, "Invalid data string format"
    end
  end

  def Enc::encode_pkey(str)
    encode_key_p((15 << 3).chr + str)
  end

  def Enc::encode_kkey(str)
    encode_key_p((10 << 3).chr + str)
  end

  def Enc::decode_key(str)
    begin
      str = Base32::decode(str)
    rescue => ex
      raise RuntimeError, "Invalid key string format"
    end
    key = str[0...-2]
    raise RuntimeError, "Invalid key string checksum" \
      unless Digest::CRC16.digest(key) == str[-2, 2]
    key[1..-1]
  end

  private

  def Enc::encode_key_p(str)
    str = str + Digest::CRC16.digest(str)
    Base32::encode(str)
  end
end # class Enc

# Signing class
class Sign

# ========== commands declaration ==========

private

#
# Returns the stored pair as an array [SigningKey, VerifyKey]
#
def get_signing_key
  raise KeyfileError, "No keyfile found in current dir, $SONGE_HOME or $HOME" unless File.file?(@key_path)
  say "üóù Keyfile found in <%=color('#{@key_path}', BOLD)%>"

  # Read key file
  data = YAML.load(File.open(@key_path))
  raise KeyfileError, "Invalid keyfile #{@key_path} content" unless data && data.is_a?(Hash)

  cipherkey = Enc.decode(data[:signingkey])
  # Get and hash password
  pwd = ask("‚úè Please enter the <%=color('passphrase', BOLD)%>: ") {|q| q.echo = false}
  salt = cipherkey[(i = 0)...(i += RbNaCl::PasswordHash::Argon2::SALTBYTES)]
  hash = RbNaCl::PasswordHash.argon2(pwd, salt, 5, 7_256_678, 32)
  # Decrypt the signing key
  box = RbNaCl::SecretBox.new(hash)
  nonce = cipherkey[i...(i += box.nonce_bytes)]
  prv = RbNaCl::SigningKey.new(box.decrypt(nonce, cipherkey[i..-1]))
  pub = prv.verify_key
  # also verify the non-protected verify key
  raise KeyfileError, "Signing key and verify do NOT match!" \
    unless pub == RbNaCl::VerifyKey.new(Enc.decode_key(data[:verifykey]))

  [prv, pub]
end

#
# Returns the stored VerifyKey
#
def get_verify_key
  raise KeyfileError, "No keyfile found in current dir, $SONGE_HOME nor $HOME" unless File.file?(@key_path)

  # Read key file
  data = YAML.load(File.open(@key_path))
  raise KeyfileError, "Invalid keyfile #{@key_path} content" unless data && data.is_a?(Hash)

  RbNaCl::VerifyKey.new(Enc.decode_key(data[:verifykey]))
end

#
# Returns the list of all trusted VerifyKey
#
def get_trusted_keys
  return [] unless File.file?(@trust_path)

  if File.file?(@trust_path + SIGEXT)
    data = YAML.load(File.open(@trust_path + SIGEXT))
    pub = @options[:secure] ? get_signing_key[1] : get_verify_key
    pub.verify(Enc.decode(data[:signature]), File.read(@trust_path)) \
      if File.file?(@trust_path + SIGEXT)
  elsif @warn_trust
    say "<%=color('‚ö† Warning:', YELLOW)%> <%=color('#{@key_path}', BOLD)%> file is " +
        "<%=color('‚úñ not signed', RED+BOLD)%>"
  end
  File.open(@trust_path, 'r').readlines.map(&:chomp).uniq.sort
end

#
# Write trusted keys file
#
# param keys [Array] base32 encoded keys array
# param prv [SigningKey] the signing key to sign the keystore
def put_trusted_keys(keys, prv)
  keys_s = keys.join("\n") + "\n"
  # Key store
  File.write(@trust_path, keys_s)
  # Signature
  data = {
    signature: Enc.encode(prv.sign(keys_s))
  }
  File.write(@trust_path + SIGEXT, data.to_yaml)
end

#
# Abbreviate a key to a form like PABCDEFGHIJKLMN (67 bits)
#
# param key_str [String] the base32 encoded key
def abbrev_key(key_str)
  key_str[0, 15]
end

#
# Import an existing signing key
#
def import_key
  msg = "<%=color('‚ö† Keyfile found', YELLOW)%> in the current directory, " +
        "<%=color('overwrite it', BOLD)%> (Y/n)?"
  return if File::file?(@key_path) && ask(msg) { |q| q.validate = /Y|n/ } != 'Y'

  prv_str = ask("‚úè Please paste the <%=color('signing key', BOLD)%>:\n") do |q|
    q.validate = /^K/
  end
  prv = RbNaCl::SigningKey.new(Enc.decode_key(prv_str))
  pub = prv.verify_key
  write_signing_key(prv, pub)

  # Success: print key info and append to the trusted store
  say "Signing key securely saved in <%=color('#{@key_path}', BOLD)%> file" if @options[:verbose]
  pub_str = Enc.encode_pkey(pub)
  add_trusted_key(pub_str, prv)
  say "Verify key added to trust list <%=color('#{@trust_path}', BOLD)%> file" if @options[:verbose]
  say "Verify key: <%=color('#{pub_str}', YELLOW)%>"
end

#
# Generate a new signing key
#
def generate
  msg = "<%=color('‚ö† Keyfile found', YELLOW)%> in #{@key_path}, " +
        "<%=color('overwrite it', BOLD)%> (Y/n)?"
  has_key = File.file?(@key_path)
  return if has_key && ask(msg) { |q| q.validate = /Y|n/ } != 'Y'

  start = Time.now
  prv = RbNaCl::SigningKey.generate
  pub_old = Enc.encode_pkey(get_verify_key) if has_key
  pub = prv.verify_key
  say "<%=color('(‚è≤ #{'%.2f' % ((Time.now - start) * 1000)} ms)', GRAY)%>" if @options[:verbose]
  write_signing_key(prv, pub)

  # Remove old key from trusted store
  del_trusted_key(pub_old, prv) if has_key

  # Success: print key info and append to the trusted store
  say "Signing key securely saved in <%=color('#{@key_path}', BOLD)%> file" if @options[:verbose]
  pub_str = Enc.encode_pkey(pub)
  add_trusted_key(pub_str, prv)
  say "Verify key added to trust list <%=color('#{@trust_path}', BOLD)%> file" if @options[:verbose]
  say "Verify key: <%=color('#{pub_str}', YELLOW)%>"
end

#
# Change private key passphrase
#
def change_passphrase
  prv, pub = get_signing_key
  write_signing_key(prv, pub)
  pub_str = Enc.encode_pkey(pub)
  add_trusted_key(pub_str, prv)
end

#
# Write signing key
#
# param prv [SigningKey] the signing key to write
# param pub [VerifyKey] the verify key to write
def write_signing_key(prv, pub)
  # Get a password
  if @options[:secure]
    pwd = SecureRandom.base64(12).chars.each_slice(4).map(&:join).join('-')
    key = ask("Your password: <%=color('#{pwd}', RED+BOLD)%>\n" +
        "<%=color('Write it down', YELLOW+BOLD)%> in a safe place, then press 'Y' to validate: ") do |q|
      q.echo      = true
      q.character = true
    end
    raise PasswordError, 'Change passphrase cancelled' if key != 'Y'
  else
    echo = Proc.new { |p| p.echo = false }
    pwd = ask("‚úè Please choose a good <%=color('passphrase', BOLD)%>: ", &echo)
    # Check for password strength
    checker = StrongPassword::StrengthChecker.new(min_entropy: 18)  # default
    raise PasswordError, 'The passphrase is too WEAK' if checker.is_weak?(pwd)
    # Check for repeat
    pwdc = ask("‚úè Please type again the <%=color('passphrase', BOLD)%>: ", &echo)
    raise PasswordError, 'The passphrases does NOT match' if pwd != pwdc
  end

  # Hash password with Argon2 (16-bytes salt, 32-bytes output)
  salt = RbNaCl::Random.random_bytes(RbNaCl::PasswordHash::Argon2::SALTBYTES)
  hash = RbNaCl::PasswordHash.argon2(pwd, salt, 5, 7_256_678, 32)
  # Encrypt signing key with hash
  box = RbNaCl::SecretBox.new(hash)
  nonce = RbNaCl::Random.random_bytes(box.nonce_bytes)
  cipherkey = salt + nonce + box.encrypt(nonce, prv)  # 16 + 24 + (16 + 32)

  # Write encrypted key to file
  data = {
    verifykey: Enc.encode_pkey(pub),
    signingkey: Enc.encode(cipherkey)
  }
  File.open(KEYFILE, 'w') do |f|
    f.chmod(0600)
    f.write(data.to_yaml)
  end
  # Trust store signature
  File.delete(@trust_path + SIGEXT) if File.file?(@trust_path + SIGEXT)
  @warn_trust = false
end

#
# Read signing key
#
def read_signing_key
  prv, pub = get_signing_key
  say "Verify key:  <%=color('#{Enc.encode_pkey(pub)}', YELLOW)%>"
  _, cols = $stdout.winsize
  prv_str = Enc.encode_kkey(prv)
  msg = ['Signing key: ',
         cols > 56 ? "<%=color('#{prv_str}', MAGENTA)%> " :
                     "<%=color('#{prv_str[0, cols - 4] + '...'}', MAGENTA)%> ",
         "(Press a key to <%=color('hide', BOLD)%>) "]
  ask(cols > 92 ? msg.join : msg[0] + msg[2] + "\n" + msg[1]) do |q|
    q.echo      = false
    q.overwrite = true
    q.character = true
  end
end

#
# Read verify key
#
def read_verify_key
  say "Verify key:  <%=color('#{Enc.encode_pkey(get_verify_key)}', YELLOW)%>"
end

#
# Sign a file content
#
# param file [String] the signed file name (without sign extension)
def sign(file)
  # Get keys
  prv, pub = get_signing_key
  pub_str = Enc.encode_pkey(pub)
  say "Signing with key: <%=color('#{abbrev_key(pub_str)}', YELLOW)%>" if @options[:verbose]
  comment = @options[:comment] || ask("‚úè You can attach a short <%=color('comment', BOLD)%>: ")

  # Write signature content
  start = Time.now
  sha = @options[:clearsg] ? Digest::SHA512.new : Digest::SHA512.file(file)
  data = {}
  unless comment.empty?
    data[:comment] = comment
    sha << "\0x00" + comment
  end
  data[:datetime] = start.to_i
  sha << "\0x00" + start.to_i.to_s
  data[:verifykey] = Enc.encode_pkey(pub)
  if @options[:clearsg]
    str = File.read(file)
    data[:data] = str
    sha << "\0x00" + str
  end
  data[:signature] = Enc.encode(prv.sign(sha.digest))

  msg = "# Signature made with Songe - #{SONGE_URL}\n" +
        "# Just verify it using the 'songev' ruby script:  songev '#{file}'\n\n"
  File.write(file + SIGEXT, msg + data.to_yaml)
  say "Signature <%=color('saved', GREEN)%> to: <%=color('#{file + SIGEXT}', BOLD)%>\n" +
      "<%=color('(‚è≤ #{'%.2f' % ((Time.now - start) * 1000)} ms)', GRAY)%>" if @options[:verbose]
end

#
# Verify a signature for a file/data
#
# param file [String] the signed file name (without sign extension)
def verify(file)
  # Read YAML file and comment
  data = YAML.load(File.open(file + SIGEXT))
  raise KeyfileError, "Invalid file #{file + SIGEXT} content" unless data && data.is_a?(Hash)

  say "Signature in file: <%=color('#{file + SIGEXT}', BOLD)%>" if @options[:verbose]
  clearsg = !File.file?(file)

  # Hash data
  start = Time.now
  sha = if clearsg
    raise VerificationError, "File #{file} does not exist, no signed data" if data[:data].nil?
    Digest::SHA512.new
  else
    say "<%=color('‚ö† Warning:', YELLOW)%> clear sign data found but ignored" if data.has_key?(:data)
    Digest::SHA512.file(file)
  end
  sha << "\0x00" + data[:comment] unless data[:comment].nil?
  sha << "\0x00" + data[:datetime].to_s
  sha << "\0x00" + data[:data] if clearsg

  # Control data
  ctn = Enc.decode(data[:signature])
  pub = RbNaCl::VerifyKey.new Enc.decode_key(data[:verifykey])
  say "Signed with key: <%=color('#{abbrev_key(data[:verifykey])}', YELLOW)%>" if @options[:verbose]
  pub.verify(ctn, sha.digest) || raise(VerificationError, "BAD signature")
  if clearsg
    t = get_trusted_keys.include?(data[:verifykey]) ? "with trusted key" :
      "but the verify key is ‚úñ not trusted\n  (#{data[:verifykey]})"
    $stderr.puts "‚úî Good signature #{t}\n  signed on #{Time.at(data[:datetime])}"
    $stdout.print data[:data]
    $stderr.puts "Comment: #{data[:comment]}\n" unless data[:comment].nil?
  else
    t = get_trusted_keys.include?(data[:verifykey]) ? "with trusted key" :
      "but the verify key is <%=color('‚úñ not trusted', RED+BOLD)%>\n" +
      "  (<%=color('#{data[:verifykey]}', YELLOW)%>)"
    say "<%=color('‚úî Good signature', GREEN+BOLD)%> #{t}\n"
    say "  signed on <%=color('#{Time.at(data[:datetime])}', BOLD)%>"
    say "<%=color('(‚è≤ #{'%.2f' % ((Time.now - start) * 1000)} ms)', GRAY)%>" if @options[:verbose]
    say "<%=color('Comment', BOLD)%>: #{data[:comment]}\n" unless data[:comment].nil?
  end
end

#
# List all trusted keys or find trusted keys by a part of its base32 encoding
#
# param s [String] the key substring to filter with, or nil for no filter
def list_trusted_keys(s = nil)
  keys = get_trusted_keys
  match_nb = 0
  keys.each_with_index do |k, i|
    if s.nil?
      match_nb += 1
      say "üóù #{'%2d' % (i + 1)}: <%=color('#{k}', YELLOW)%>"
    elsif !(j = k.index s).nil?
      match_nb += 1
      high_key = "<%=color('#{k[0...j]}', YELLOW)%><%=color('#{s}', GREEN+BOLD)%>" +
                 "<%=color('#{k[(j + s.length)..-1]}', YELLOW)%>"
      say "üóù #{'%2d' % (i + 1)}: #{high_key}"
    end
  end
  # Show results
  if keys.size == 0
    say "<%=color('‚ö† No', YELLOW)%> trusted keys yet, please generate yours or add one"
  elsif match_nb.zero? || @options[:verbose]
    say "<%=color(#{match_nb.zero? ? "'‚úñ not', RED+BOLD" : "'‚úî #{match_nb}', GREEN"})%> found"
  end
end

#
# Add a trusted key to the key store
#
# param key [String] the base32 encoded key to add
# param prv [SigningKey] the signing key to sign the keystore, or dthe efault one
def add_trusted_key(key, prv = get_signing_key[0])
  put_trusted_keys(get_trusted_keys << key, prv)
end

#
# Remove a trusted key from the key store
#
# param key [String] the base32 encoded key to delete
# param prv [SigningKey] the signing key to sign the keystore, or the default one
def del_trusted_key(key, prv = get_signing_key[0])
  trust = get_trusted_keys
  key.length < 5 && key =~ /^\d+$/ and trust.delete_at(key.to_i - 1) or trust.delete(key)
  put_trusted_keys(trust, prv)
end

#
# Simple test
#
# param arg [Any] an argument to be tested
def dev_test(arg = nil)
  raise "Nothing to test (I said: Do not use it!)" unless DEBUG
end

# ========== reading arguments ==========

public

#
# Constructor
#
def initialize
  @warn_trust = true
  @options = {}
  # Search for key file in .|SONGE_HOME|HOME
  if File.file?(KEYFILE)
    @key_path = KEYFILE
    @trust_path = KEYTRUST
  elsif !(path = ENV[ENV_SHOME]).nil? && Dir.exist?(ENV[ENV_SHOME]) ||
        !(path = ENV[ENV_HOME]).nil? && File.file?(File.join(path, KEYFILE))
    # If found dir SONGE_HOME, no need to check if key file exists
    @key_path = File.join(path, KEYFILE)
    @trust_path = File.join(path, KEYTRUST)
  else
    @key_path = KEYFILE
    @trust_path = KEYTRUST
  end
end

#
# Main entry: switch options
#
def main
  cmd_given = false

  OptionParser.new do |opts|
    opts.banner = "
Songe | dead simple signing file utility
MIT License (https://mit-license.org/)

Songe is a naive file signer, adapted to sign files in a per-project context: each project
directory can have its own keys to directly sign project files. Songe currently uses RbNaCl
(github.com/RubyCrypto/rbnacl), which uses libsodium (github.com/jedisct1/libsodium).

Verify and signing use thus Ed25519 32-bytes keys. The signing key (starting with 'K') is
encrypted with the user passphrase before saved on disk. The verify key (starting with 'P')
is joined to the signing key saved on disk and to all signatures (so to verify a file, you
just need the file and the signature `.sgsig` file). Key pair is saved to `.songe.key`.
Key pair location is looked up from 1) current directory, 2) $SONGE_HOME environment var.,
and then 3) $HOME environment var.

Trusted recipients' verify keys may be added to a trusted keys list saved to `.songe.trust`
to add confidence when verifiyng files signed by them. The trusted keystore is managed by
songe commands and signed at each editing access by the personal signing key. Although the
trust keystore is signed, it is up to the user to check the recipient's key.

Usage:
  $ songe [options] command

Examples:
  Generate a new signing key (saves the key to `./.songe.key`)
  $ songe --generate
  Sign a file with the new key (saves the signature to `./myfile.txt.sgsig`)
  $ songe --message 'first release' --sign myfile.txt
  Add a verify key to the trusted list (please use a full string key)
  $ songe --add-key PABCD1...EFGH2
  Verify a downloaded file (assume the signature is `./myfile.txt.sgsig`)
  $ songe --verify myfile.txt

Options/commands:"

    # options

    opts.on("-b", "--[no-]verbose", "Run verbosely") do |v|
      @options[:verbose] = v
    end

    opts.on("-r", "--[no-]secure", "Securely verify trust / choose a password") do |v|
      @options[:secure] = v
    end

    opts.on("-m", "--message MSG", "With --sign, attach a comment (will be signed)") do |v|
      @options[:comment] = v
    end

    opts.on("-e", "--[no-]embed", "with --sign, make an embedded signature") do |v|
      @options[:clearsg] = v
    end

    # key commands

    opts.on("-i", "--import-key", "Import an existing signing key locally") do
      import_key
      exit
    end

    opts.on("-g", "--generate", "Generate a new keypair and save it locally") do
      generate
      exit
    end

    opts.on("-c", "--change-pass", "Change the passphrase of the signing key") do
      change_passphrase
      exit
    end

    opts.on("-k", "--signkey", "Write the signing key to standard output") do
      read_signing_key
      exit
    end

    opts.on("-p", "--verifkey", "Write the verify key to standard output") do
      read_verify_key
      exit
    end

    opts.on("-s", "--sign FILE", "Sign the given file with the signing key") do |f|
      sign f
      exit
    end

    opts.on("-v", "--verify FILE", "Verify the given file (embedded verify key)") do |f|
      verify f
      exit
    end

    opts.on("-l", "--trusted [KEY]", "List or search for the trusted keys") do |s|
      list_trusted_keys s
      exit
    end

    opts.on("-a", "--add-key KEY", "Add a trusted key to the keystore") do |k|
      Enc.decode_key k
      add_trusted_key k
      exit
    end

    opts.on("-d", "--del-key KEY", "Remove a trusted key from the keystore") do |k|
      del_trusted_key k
      exit
    end

    # misc commands

    opts.on("-t", "--test [ARG]", "Run some dev tests (don't use it)") do |a|
      dev_test a
      exit
    end

    opts.on("-h", "--help", "Print this help and quit") do
      puts opts
      exit
    end

    opts.on("-n", "--version", "Print version info and quit") do
      say "<%=color('üéñ  songe', BOLD)%>\n   dead simple signing file utility"
      say "   version <%=color('#{VERSION}', BOLD)%>\n   Mica√´l P. (myxcel)"
      exit
    end

  end.parse!
  raise ArgumentError, 'One command is required (see help)'
end

end # class Sign

end # module

# Run as main file
if __FILE__ == $0
  begin
    Songe::Sign.new.main
  rescue => ex
    say "<%=color('‚úñ #{ex.message.gsub("'"," ")}', RED+BOLD)%>"
    say "dbg: <%=color('Backtrace', BOLD)%> (most recent first):\n  " + ex.backtrace.join("\n  ") \
      if Songe::DEBUG
    exit 1
  end
end

